from telegram import Update
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, ContextTypes, CommandHandler, MessageHandler, filters, \
    ConversationHandler
from gpt import ChatGptService
from util import (load_message, send_html, send_text, send_image, show_main_menu, load_prompt, send_text_buttons, Dialog)

import credentials

# –æ–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def default_callback_handler(update: Update,
                                   context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    query = update.callback_query.data
    if dialog.mode == "random":
        if query == "more_btn":            # –ö–Ω–æ–ø–∫–∞ "–•–æ—á—É —â–µ —Ñ–∞–∫—Ç"
            await random(update, context)
        elif query == "end_btn":            # –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"
            await start(update, context)   # –ü–µ—Ä–µ—Ö—ñ–¥ –≤ –º–µ–Ω—é Start"
    elif dialog.mode == "talk":
        if query == "cobain_talk_btn":
            dialog.mode = "cobain_talk"
            await talk_cobain(update, context)
        elif query == "hawking_talk_btn":
            dialog.mode = "hawking_talk"
            await talk_hawking(update, context)
        elif query == "nietzsche_talk_btn":
            await talk_nietzsche(update, context)
        elif query == "queen_talk_btn":
            await talk_queen(update, context)
        elif query == "tolkien_talk_btn":
            await talk_tolkien(update, context)
    elif query == "end_talk_btn":            # –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"
        await talk(update, context)          # –ü–µ—Ä–µ—Ö—ñ–¥ –≤ –º–µ–Ω—é Start"
    elif dialog.mode == "quiz":
        if query == "quiz_prog":
            dialog.mode = "quiz_prog"
            await quiz_prog(update, context)
    elif query == "end_btn":                 # –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"
        await start(update, context)         # –ü–µ—Ä–µ—Ö—ñ–¥ –≤ –º–µ–Ω—é Start"


# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = "default"
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',
        'random': '–î—ñ–∑–Ω–∞—Ç–∏—Å—è –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ü—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é üë§',
        'quiz': '–í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É –∫–≤—ñ–∑—ñ ‚ùì'
        # –î–æ–¥–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –º–æ–∂–Ω–∞ —Ç–∞–∫:
        # 'command': 'button text'

    })

### 1. —Ü—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç –≤—ñ–¥ GPT
async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = "random"
    text = load_message("random")
    await send_image(update, context, "random")
    await send_text(update, context, text)
    prompt = load_prompt("random")
    content = await chat_gpt.send_question(prompt, "–î–∞–π —Ü—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç")
    await send_text_buttons(update, context, content,{
        "more_btn": "–•–æ—á—É —â–µ —Ñ–∞–∫—Ç",
        "end_btn": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"
    })

### 2. *"ChatGPT —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å"*
async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = "gpt"
    text = load_message("gpt")
    await send_image(update, context, "gpt")
    await send_text(update, context, text)

# –æ—Ç—Ä–∏–º—É—î–º–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –≤–µ–¥–µ–º–æ –¥—ñ–∞–ª–æ–≥–∏
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    correct_answers_count = 0
    if update.message and update.message.text:
        question = update.message.text
    else:
        question = "  "
    print("–û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–∏—Ç–∞–≤ —â–æ: {question}") # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ–∫—Å—Ç—É –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤ —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ
    if len(question) > 500:   # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ –¥–æ–≤–∂–∏–Ω—É
        await send_text(update, context, "Your question is too long, no more 500 characters.")
        return

    if dialog.mode == "gpt":
        prompt = load_prompt("gpt")  # –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
        content = await chat_gpt.send_question(prompt, question)  # –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–æ–º–ø—Ç —Ç–∞ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ GPT
        await send_text(update, context, content)  # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ GPT –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        answer = await chat_gpt.send_message_list()  # –æ—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT —Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –≤ —Ç–µ—Ä–º—ñ–Ω–∞–ª
        print(answer)

    elif dialog.mode == "cobain_talk":
        prompt = load_prompt("talk_cobain")
        # print(prompt)
        content = await chat_gpt.send_question(prompt, question)
        await send_text(update, context, content)
        print(content)

        content = "–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"
        await send_text_buttons(update, context, content, {
                 "end_talk_btn": "–í–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –≤—ñ–¥–æ–º—É –æ—Å–æ–±—É",
                 "end_btn": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"
        })
    elif dialog.mode == "hawking_talk":
        prompt = load_prompt("talk_hawking")
        # print(prompt)
        content = await chat_gpt.send_question(prompt, question)
        await send_text(update, context, content)
        print(content)

        content = "–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"
        await send_text_buttons(update, context, content, {
                 "end_talk_btn": "–í–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –≤—ñ–¥–æ–º—É –æ—Å–æ–±—É",
                 "end_btn": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"
        })
    elif dialog.mode == "nietzsche_talk":
        prompt = load_prompt("talk_nietzsche")
        # print(prompt)
        content = await chat_gpt.send_question(prompt, question)
        await send_text(update, context, content)
        print(content)

        content = "–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"
        await send_text_buttons(update, context, content, {
                 "end_talk_btn": "–í–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –≤—ñ–¥–æ–º—É –æ—Å–æ–±—É",
                 "end_btn": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"
        })

    elif dialog.mode == "queen_talk":
        prompt = load_prompt("talk_queen")
        # print(prompt)
        content = await chat_gpt.send_question(prompt, question)
        await send_text(update, context, content)
        print(content)

        content = "–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"
        await send_text_buttons(update, context, content, {
                 "end_talk_btn": "–í–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –≤—ñ–¥–æ–º—É –æ—Å–æ–±—É",
                 "end_btn": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"
        })

    elif dialog.mode == "tolkien_talk":
        prompt = load_prompt("talk_tolkien")
        # print(prompt)
        content = await chat_gpt.send_question(prompt, question)
        await send_text(update, context, content)
        print(content)

        content = "–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"
        await send_text_buttons(update, context, content, {
                 "end_talk_btn": "–í–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –≤—ñ–¥–æ–º—É –æ—Å–æ–±—É",
                 "end_btn": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"
        })

    elif dialog.mode == "quiz_prog":
        prompt = load_prompt("quiz")
        answer = await chat_gpt.send_question(prompt, question)
        await send_text(update, context, answer)
        print(f" GPT answer: {answer}")

        if answer.strip().lower() == "–ø—Ä–∞–≤–∏–ª—å–Ω–æ!":
            correct_answers_count += 1
            await send_text(update, context, f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞! ‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {correct_answers_count}")
        elif answer.strip().lower() == "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!":
            await send_text(update, context, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. ‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {correct_answers_count}")

        content = "–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –Ω–∞–ø–∏—à–∏: quiz prog"
        await send_text_buttons(update, context, content, {
                 # "quiz_more": "–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ —Ç—É –∂ —Ç–µ–º—É",
                 "end_btn": "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
        })

### 3. "–î—ñ–∞–ª–æ–≥ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é"
async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = "talk"
    text = load_message("talk")
    await send_image(update, context, "talk")
    await send_text(update, context, text)
    content = "–í–∏–±–µ—Ä–∏ –≤—ñ–¥–æ–º—É –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å"
    await send_text_buttons(update, context, content, {
        "cobain_talk_btn": "–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω - –°–æ–ª—ñ—Å—Ç –≥—É—Ä—Ç—É Nirvana",
        "hawking_talk_btn": "–°—Ç—ñ–≤–µ–Ω –ì–æ–∫—ñ–Ω–≥ - –§—ñ–∑–∏–∫",
        "nietzsche_talk_btn": "–§—Ä—ñ–¥—Ä—ñ—Ö –ù—ñ—Ü—à–µ - –§—ñ–ª–æ—Å–æ—Ñ",
        "queen_talk_btn": "–Ñ–ª–∏–∑–∞–≤–µ—Ç–∞ II - –ö–æ—Ä–æ–ª–µ–≤–∞ –û–±'—î–¥–Ω–∞–Ω–æ–≥–æ –ö–æ—Ä–æ–ª—ñ–≤—Å—Ç–≤–∞",
        "tolkien_talk_btn": "–î–∂–æ–Ω –¢–æ–ª–∫—ñ–Ω - –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏ –í–æ–ª–æ–¥–∞—Ä –ü–µ—Ä—Å–Ω—ñ–≤",
        "end_btn": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"
    })

## –ö—É—Ä—Ç –ö–æ–±–µ–π–Ω, –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π —Ñ—Ä–æ–Ω—Ç–º–µ–Ω –≥—É—Ä—Ç—É Nirvana.
async def talk_cobain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = "cobain_talk"
    text = "–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –ö—É—Ä—Ç –ö–æ–±–µ–π–Ω. –Ø –°–æ–ª—ñ—Å—Ç –≥—É—Ä—Ç—É Nirvana."
    await send_image(update, context, "talk_cobain")
    await send_text(update, context, text)
    await handle_message(update, context)

## –°—Ç—ñ–≤–µ–Ω –ì–æ–∫—ñ–Ω–≥ - –§—ñ–∑–∏–∫
async def talk_hawking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = "hawking_talk"
    text = "–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –°—Ç—ñ–≤–µ–Ω –ì–æ–∫—ñ–Ω–≥. –Ø –§—ñ–∑–∏–∫"
    await send_image(update, context, "talk_hawking")
    await send_text(update, context, text)
    await handle_message(update, context)

## –§—Ä—ñ–¥—Ä—ñ—Ö –ù—ñ—Ü—à–µ - –§—ñ–ª–æ—Å–æ—Ñ
async def talk_nietzsche(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = "nietzsche_talk"
    text = "–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –§—Ä—ñ–¥—Ä—ñ—Ö –ù—ñ—Ü—à–µ - –§—ñ–ª–æ—Å–æ—Ñ"
    await send_image(update, context, "talk_nietzsche")
    await send_text(update, context, text)
    await handle_message(update, context)

## –Ñ–ª–∏–∑–∞–≤–µ—Ç–∞ II - –ö–æ—Ä–æ–ª–µ–≤–∞ –û–±'—î–¥–Ω–∞–Ω–æ–≥–æ –ö–æ—Ä–æ–ª—ñ–≤—Å—Ç–≤–∞
async def talk_queen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = "queen_talk"
    text = "–Ø - –Ñ–ª–∏–∑–∞–≤–µ—Ç–∞ II - –ö–æ—Ä–æ–ª–µ–≤–∞ –û–±'—î–¥–Ω–∞–Ω–æ–≥–æ –ö–æ—Ä–æ–ª—ñ–≤—Å—Ç–≤–∞"
    await send_image(update, context, "talk_queen")
    await send_text(update, context, text)
    await handle_message(update, context)

## –î–∂–æ–Ω –¢–æ–ª–∫—ñ–Ω - –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏ "–í–æ–ª–æ–¥–∞—Ä –ü–µ—Ä—Å–Ω—ñ–≤"
async def talk_tolkien(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = "tolkien_talk"
    text = "–ú–æ—î —ñ–º'—è - –î–∂–æ–Ω –¢–æ–ª–∫—ñ–Ω. –Ø - –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏ ""–í–æ–ª–æ–¥–∞—Ä –ü–µ—Ä—Å–Ω—ñ–≤"""
    await send_image(update, context, "talk_tolkien")
    await send_text(update, context, text)
    await handle_message(update, context)

### 4. *"–ö–≤—ñ–∑"*
async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = "quiz"
    text = load_message("quiz")
    await send_image(update, context, "quiz")
    await send_text(update, context, text)
    content = "–û–±–µ—Ä–∏ —Ç–µ–º—É, –Ω–∞ —è–∫—É –±—É–¥–µ—à –≥—Ä–∞—Ç–∏:"
    await send_text_buttons(update, context, content, {
        "quiz_prog": "–ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –º–æ–≤–æ—é python",
        "quiz_math": "–º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ —Ç–µ–æ—Ä—ñ—ó",
        "quiz_biology": "–±—ñ–æ–ª–æ–≥—ñ—è",
        # "quiz_more": "–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ —Ç—É –∂ —Ç–µ–º—É",
        "end_btn": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"
    })


async def quiz_handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    correct_answers_count = 0
    if update.message and update.message.text:
        question = update.message.text
    else:
        question = "  "
    print("–û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–∏—Ç–∞–≤ —â–æ: {question}")  # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ–∫—Å—Ç—É –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤ —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ
    if len(question) > 500:  # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ –¥–æ–≤–∂–∏–Ω—É
        await send_text(update, context, "Your question is too long, no more 500 characters.")
        return

## 4.1 *"–ö–≤—ñ–∑"* –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –º–æ–≤–æ—é python
async def quiz_prog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "–¢–∏ –æ–±—Ä–∞–≤ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –º–æ–≤–æ—é python, —â–æ–± –ø–æ—á–∞—Ç–∏, –Ω–∞–ø–∏—à–∏: quiz prog"
    await send_text(update, context, text)
    load_prompt("quiz")  # –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
    # # question = update.message.text
    # content = await chat_gpt.send_question(prompt, None)  # –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–æ–º–ø—Ç —Ç–∞ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ GPT
    # await send_text(update, context, content)  # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ GPT –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    # # answer = await chat_gpt.send_message_list()  # –æ—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT —Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –≤ —Ç–µ—Ä–º—ñ–Ω–∞–ª
    # # print(f"GPT –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î: {answer}")


dialog = Dialog()
dialog.mode = "default"


chat_gpt = ChatGptService(credentials.ChatGPT_TOKEN)
app = ApplicationBuilder().token(credentials.BOT_TOKEN).build()

# –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ –º–æ–∂–Ω–∞ —Ç–∞–∫:
app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('random', random))
app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(CommandHandler('talk', talk))
app.add_handler(CommandHandler('quiz', quiz))

app.add_handler(MessageHandler(filters.TEXT, handle_message))
app.add_handler(MessageHandler(filters.TEXT, quiz_handle_message))

# –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–ª–±–µ–∫—É –º–æ–∂–Ω–∞ —Ç–∞–∫:
# app.add_handler(CallbackQueryHandler(app_button, pattern='^app_.*'))
app.add_handler(CallbackQueryHandler(default_callback_handler))
app.run_polling()
