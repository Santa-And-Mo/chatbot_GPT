from telegram import Update
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, ContextTypes, CommandHandler, MessageHandler, filters

from gpt import ChatGptService
from util import (load_message, send_text, send_image, show_main_menu, load_prompt, send_text_buttons, Dialog)

import credentials

# –æ–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ "–í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç"
async def default_callback_handler(update: Update,
                                   context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    query = update.callback_query.data
    if query == "more_btn":            # –ö–Ω–æ–ø–∫–∞ "–•–æ—á—É —â–µ —Ñ–∞–∫—Ç"
        await random(update, context)
    elif query == "end_btn":            # –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"
        await start(update, context)   # –ü–µ—Ä–µ—Ö—ñ–¥ –≤ –º–µ–Ω—é Start"


# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = "default"
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',
        'random': '–î—ñ–∑–Ω–∞—Ç–∏—Å—è –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ü—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é üë§',
        'quiz': '–í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É –∫–≤—ñ–∑—ñ ‚ùì'
        # –î–æ–¥–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –º–æ–∂–Ω–∞ —Ç–∞–∫:
        # 'command': 'button text'

    })

# —Ü—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç –≤—ñ–¥ GPT
async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = "random"
    text = load_message("random")
    await send_image(update, context, "random")
    await send_text(update, context, text)
    prompt = load_prompt("random")
    content = await chat_gpt.send_question(prompt, "–î–∞–π —Ü—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç")
    await send_text_buttons(update, context, content, {
        "more_btn": "–•–æ—á—É —â–µ —Ñ–∞–∫—Ç",
        "end_btn": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"
    })
# –ø–∏—Ç–∞–Ω–Ω—è –¥–æ GPT
async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = "gpt"
    text = load_message("gpt")
    await send_image(update, context, "gpt")
    await send_text(update, context, text)

# –æ—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT
async def handle_gpt_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    gpt_message = update.message.text
    return gpt_message
    # print(gpt_message)

# –æ—Ç—Ä–∏–º—É—î–º–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤ —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = update.message.text
    print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–∏—Ç–∞–≤: {question}") # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ–∫—Å—Ç—É –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
    if dialog.mode == "gpt":
        await handle_gpt_message(update, context)

# –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ –¥–æ–≤–∂–∏–Ω—É
    if len(question) > 500:
        await send_text(update, context, "Your question is too long.")
        return
# –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
    prompt = load_prompt("gpt")
# –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–æ–º–ø—Ç —Ç–∞ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ GPT
    content = await chat_gpt.send_question(prompt, question)

# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ GPT –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await send_text(update, context, content)
# –æ—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT —Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –≤ —Ç–µ—Ä–º—ñ–Ω–∞–ª
    answer = await chat_gpt.send_message_list()
    print(answer)

dialog = Dialog()
dialog.mode = "default"

chat_gpt = ChatGptService(credentials.ChatGPT_TOKEN)
app = ApplicationBuilder().token(credentials.BOT_TOKEN).build()

# –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ –º–æ–∂–Ω–∞ —Ç–∞–∫:
app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('random', random))

app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(MessageHandler(filters.TEXT, handle_message))


# –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–ª–±–µ–∫—É –º–æ–∂–Ω–∞ —Ç–∞–∫:
# app.add_handler(CallbackQueryHandler(app_button, pattern='^app_.*'))
app.add_handler(CallbackQueryHandler(default_callback_handler))
app.run_polling()
